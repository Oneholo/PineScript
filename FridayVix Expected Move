
//@version=5

InitCapital = 10000
InitPosition = 1
InitCommission = 3
InitPyramidMax = 1
CalcOnorderFills = false

strategy(title="FEMFiday Expected Move", shorttitle="FEM", overlay=true, process_orders_on_close =true,
 pyramiding=InitPyramidMax, initial_capital=InitCapital, slippage  = 5,margin_short = 20, margin_long = 20,default_qty_type = strategy.fixed, commission_type = strategy.commission.cash_per_contract,
 calc_on_order_fills=CalcOnorderFills,default_qty_value=InitPosition,  commission_value=InitCommission, precision=6, max_lines_count=500, max_labels_count=500)

EnableStrategy    = input(defval = true, title = "Â©UglyGate Trades on/off", group = 'Strategy Trade Time Setup' )
InputAlertBool = input.bool(false, title='Signal Alerts?'  , group = 'Strategy Alert Setup')

InputShowFiboVix = input(true, title='Draw Expected Move', group = 'Strategy GUI') 
volSymbol = input.symbol("VIX", "Volatility Index") 
InputShowLabelVIX = input(false, title='Show Expected Move Label', group = 'Strategy GUI') 
inputemexp = input.int(125, "Expected Move Expenention %", group = 'Strategy Trade Stops Setup')
inputemtexp = input.int(90, "Expected Touch Expenention %", group = 'Strategy Trade Stops Setup')
inputUseIntraRange = input.bool(false, title='Use Intra Day Range' , group = 'Strategy Trade Stops Setup')
inputUseIntraWeekDays = input.int(4, "Week Days Range", group = 'Strategy Trade Stops Setup')
inputUseIntraYearDays = input.int(360, "Year Days Range", group = 'Strategy Trade Stops Setup')

InputShowIndEntrylLable = input(false, title='Show Indicator Buy/Sell lables', group = 'Strategy GUI')
InputShowProfitlossLable  = input.bool(false, title='Show Trades Profits lable?'  , group = 'Strategy GUI')
InputShowPnlLlable = input.bool(false, title='Show Extended PnL lable?'  , group = 'Strategy GUI')
InputShowShortStylePnlLable = input.bool(false, title='Show PnL lable?'  , group = 'Strategy GUI')
 
//####################################################
//##################################################################
//#                          EM                             #
//##################################################################
// Calculate expected range
// Define upper and lower edges
float Intrasessionweeklyclose = na
float Dailyasessionweeklyclose = na
float sessionweeklyclose = na
float IntrasessionweeklyVIXclose = na
float DailyasessionweeklyVIXclose = na
float sessionweeklyVIXclose = na
float sessionclose = na
sessionclose := session.islastbar?close:sessionclose[1]
Intrasessionweeklyclose := dayofweek(time) != dayofweek(time[1]) and dayofweek(time[1] ) == 6 and timeframe.isintraday?close[1]:Intrasessionweeklyclose[1]
Dailyasessionweeklyclose := timeframe.change("1W") and timeframe.isdaily?close[1]:Dailyasessionweeklyclose[1]
sessionweeklyclose := inputUseIntraRange ? sessionclose :timeframe.isintraday?Intrasessionweeklyclose  :Dailyasessionweeklyclose 

VIXclose = request.security("VIX",timeframe.period,close)
IntrasessionweeklyVIXclose := dayofweek(time) != dayofweek(time[1]) and dayofweek(time[1] ) == 6 and timeframe.isintraday?VIXclose[1]:IntrasessionweeklyVIXclose[1]
DailyasessionweeklyVIXclose := timeframe.change("1W") and timeframe.isdaily?VIXclose[1]:DailyasessionweeklyVIXclose[1]
sessionweeklyVIXclose := timeframe.isintraday?IntrasessionweeklyVIXclose  :DailyasessionweeklyVIXclose 

Divrange =   sessionweeklyclose*sessionweeklyVIXclose/100 *math.sqrt(inputUseIntraWeekDays)/math.sqrt(inputUseIntraYearDays)  
intDvrange = sessionweeklyclose*sessionweeklyVIXclose/100 *math.sqrt(1/inputUseIntraWeekDays)/math.sqrt(inputUseIntraYearDays)  
ivrange = inputUseIntraRange? intDvrange :Divrange

float PojectedMove = na
float Pojected_high_bar = na
float Pojected_low_bar = na
float Pojected_Touch_high_bar = na
float Pojected_Touch_low_bar  = na
PojectedMove := ivrange
Pojected_high_bar := sessionweeklyclose+(ivrange *inputemexp/100)
Pojected_low_bar := sessionweeklyclose-(ivrange *inputemexp/100)

Pojected_Touch_high_bar := sessionweeklyclose+(ivrange *inputemtexp/100)
Pojected_Touch_low_bar := sessionweeklyclose-(ivrange *inputemtexp/100)

Pojected_618low_bar = sessionweeklyclose -ivrange +(2*ivrange*.618)
Pojected_618high_bar = sessionweeklyclose-ivrange +(2*ivrange*.382)

Pojected_bottomrange618low_bar =sessionweeklyclose -(ivrange*.618)
Pojected_bottomrange618high_bar = sessionweeklyclose-(ivrange*.382)

Pojected_toprange618low_bar =sessionweeklyclose+(ivrange*.618)
Pojected_toprange618high_bar = sessionweeklyclose+(ivrange*.382)

//##################################################################
//#                          EM                             #
//##################################################################

peak = close >= Pojected_high_bar
valley = close <= Pojected_low_bar
touchpeak = high >= Pojected_Touch_high_bar  and close < Pojected_high_bar
touchvalley = low <= Pojected_Touch_low_bar  and close >  Pojected_low_bar

int Dailydirection = 0
Dailydirection := peak or touchpeak ?-1:valley or touchvalley?1:Dailydirection[1]
//## capture the previous projections on a new perriod, this is used for the projections trend
float prevPojectedMove = na
float prevhighbar = na
float prevlowbar =na
prevPojectedMove :=  timeframe.change("1W") ? PojectedMove[1] :  prevPojectedMove[1] 
prevhighbar :=  timeframe.change("1W") ? Pojected_high_bar[1] : prevhighbar[1]
prevlowbar :=  timeframe.change("1W")  ? Pojected_low_bar[1] : prevlowbar[1]

//# price level of projections shifting direction 
int emdir = 0
emdir := Pojected_high_bar > Pojected_high_bar[1] ?1:Pojected_high_bar < Pojected_high_bar[1]?-1:emdir[1]
float prevlowbarPrice = na
float prevhighbarPrice = na
prevlowbarPrice :=  emdir > 0 and emdir[1] < 0 ? prevlowbar : prevlowbarPrice[1]
prevhighbarPrice := emdir < 0 and emdir[1] > 0  ? prevhighbar : prevhighbarPrice[1]

BuyAboveLevels = close >= math.max(prevlowbarPrice , prevhighbarPrice) 
SellUnderLevels = close <= math.min(prevlowbarPrice , prevhighbarPrice) 

Sell618Signal=   close<Pojected_618low_bar and close<Pojected_618high_bar 
Buy618Signal =   close>Pojected_618low_bar and close>Pojected_618high_bar 

Sell100Signal =  low[1]>Pojected_low_bar  and close<Pojected_low_bar 
Buy100Signal   = high[1]<Pojected_high_bar  and close>Pojected_high_bar  

SellFibSignal =  Sell618Signal  or Sell100Signal  
BuyFibSignal =  Buy618Signal  or Buy100Signal
bool BuyEMSignal = false
bool SellEMSignal = false

short = strategy.position_size<0
long = strategy.position_size>0
if timeframe.isdaily and EnableStrategy
    if Dailydirection < 0 and short and Pojected_low_bar >  Pojected_high_bar[1]
        BuyEMSignal := true
    if  Dailydirection > 0 and long and Pojected_high_bar <  Pojected_low_bar[1] 
        SellEMSignal := true
    if touchvalley  
        BuyEMSignal := true
    if  touchpeak   
        SellEMSignal := true
    if valley and not SellUnderLevels
        BuyEMSignal := true
    if peak and not BuyAboveLevels
        SellEMSignal := true


if timeframe.isintraday  and EnableStrategy
    if BuyFibSignal
        BuyEMSignal := true
    if SellFibSignal
        SellEMSignal := true

BuyEM =   BuyEMSignal
SellEM =  SellEMSignal


InputShowLVBGupcolor = color.new(color.olive, 80)
InputShowLVBGdncolor  = color.new(color.maroon, 80)

// Plot highs and lows
// Plot expected range box
 // Plot Fibonacci levels within range
//fibLevels = [0, 0.236, 0.382, 0.5, 0.618, 0.764, 1]
//##################################################################
//#                          Levels                             #
//##################################################################
daysMulti = 7
IsShowsessionweekly = (dayofweek(time) != dayofweek(time[1]) and dayofweek(time[1] ) == 6  and timeframe.isintraday) or 
 (ta.change(time('1D')) and timeframe.change("1W") and timeframe.isdaily) or 
 (timeframe.isintraday and inputUseIntraRange and session.islastbar?true:false)

if IsShowsessionweekly 
    line.new(time[1], sessionweeklyclose, time[1]+(86400000*daysMulti), sessionweeklyclose, xloc=xloc.bar_time, width=2, color=color.yellow, style=line.style_dashed)
    line.new(time[1], Pojected_low_bar, time[1]+(86400000*daysMulti), Pojected_low_bar, xloc=xloc.bar_time,  color=color.red, style=line.style_dashed)
    line.new(time[1], Pojected_high_bar, time[1]+(86400000*daysMulti), Pojected_high_bar, xloc=xloc.bar_time,  color=color.green, style=line.style_dashed)
    line.new(time[1], Pojected_618low_bar, time[1]+(86400000*daysMulti), Pojected_618low_bar, xloc=xloc.bar_time, width=2,  color=color.red, style=line.style_dashed)
    line.new(time[1], Pojected_618high_bar, time[1]+(86400000*daysMulti), Pojected_618high_bar, xloc=xloc.bar_time, width=2,  color=color.green, style=line.style_dashed)
    line.new(time[1], Pojected_bottomrange618low_bar, time[1]+(86400000*daysMulti), Pojected_bottomrange618low_bar, xloc=xloc.bar_time,  color=color.purple, style=line.style_solid)
    line.new(time[1], Pojected_bottomrange618high_bar, time[1]+(86400000*daysMulti), Pojected_bottomrange618high_bar, xloc=xloc.bar_time,  color=color.orange, style=line.style_dashed)
    line.new(time[1], Pojected_toprange618low_bar, time[1]+(86400000*daysMulti), Pojected_toprange618low_bar, xloc=xloc.bar_time,  color=color.blue, style=line.style_solid)
    line.new(time[1], Pojected_toprange618high_bar, time[1]+(86400000*daysMulti), Pojected_toprange618high_bar, xloc=xloc.bar_time,  color=color.aqua, style=line.style_dashed)
    box.new(time[1], Pojected_high_bar, time[1]+(86400000*daysMulti), Pojected_Touch_high_bar, xloc=xloc.bar_time, border_style=line.style_dashed,border_color=InputShowLVBGupcolor , bgcolor=InputShowLVBGupcolor)
    box.new(time[1], Pojected_low_bar, time[1]+(86400000*daysMulti), Pojected_Touch_low_bar, xloc=xloc.bar_time, border_style=line.style_dashed,border_color=InputShowLVBGdncolor, bgcolor=InputShowLVBGdncolor)

fridayclose = sessionweeklyclose

if IsShowsessionweekly   // Draw the horizontal line
    // Draw lines for Main session open, Overnight and prev sessions high/low

    line.new(time[1], fridayclose - ivrange + (0.161 * ivrange*2), time[1]+(86400000*7), fridayclose - ivrange + (0.161 * ivrange*2), xloc=xloc.bar_time,  color=color.silver, style=line.style_dashed)
    line.new(time[1], fridayclose - ivrange + (0.236 * ivrange*2), time[1]+(86400000*7), fridayclose - ivrange + (0.236 * ivrange*2), xloc=xloc.bar_time,  color=color.orange, style=line.style_dashed)
    //line.new(time[1], fridayclose - ivrange + (0.382 * ivrange*2), time[1]+(86400000*7), fridayclose - ivrange + (0.382 * ivrange*2), xloc=xloc.bar_time,  color=color.purple, style=line.style_arrow_right)
    //line.new(time[1], fridayclose - ivrange + (0.618 * ivrange*2), time[1]+(86400000*7), fridayclose - ivrange + (0.618 * ivrange*2), xloc=xloc.bar_time,  color=color.aqua, style=line.style_arrow_right)
    line.new(time[1], fridayclose - ivrange + (0.786 * ivrange*2), time[1]+(86400000*7), fridayclose - ivrange + (0.786 * ivrange*2), xloc=xloc.bar_time,  color=color.blue, style=line.style_dashed)
    line.new(time[1], fridayclose - ivrange + (0.839 * ivrange*2), time[1]+(86400000*7), fridayclose - ivrange + (0.839 * ivrange*2), xloc=xloc.bar_time,  color=color.gray, style=line.style_dashed)   



Itf = input.timeframe(title="TrendRanger Time Frame ",  defval="15", group = 'TrendRanger')
ITP = input.int(5,title="TrendRanger Average Periods", minval = 1 , step = 1  , tooltip = 'Average Length ATR calculation.', group = 'TrendRanger')
TMI = input.int(3,title="TrendRanger LookBack TMI", minval = 1, step = 1, tooltip = 'LookBack Highest and lowest values .', group = 'TrendRanger')
IBP = input.int(2,title="TrendRanger Band Periods", minval = 1, step = 1, tooltip = 'Band LookBack Highest and lowest values .', group = 'TrendRanger')
IRM = input.float( 0.70, title="TrendRanger Range Multiplier", minval = 0.01, step = 0.01, tooltip = 'Range Multiplier.', group = 'TrendRanger')
IShowTrendHighLow = input.bool(false,"Trend Highes and Lows?" , group = 'TrendRanger')
IShowTrendZigZag = input.bool(true,"Trend ZigZag?" , group = 'TrendRanger')
Input_Trendfill   = input.bool(false, title='Fill Trend Rangers?'  , group = 'TrendRanger')
InputShowTrendSlow = input.bool(defval = false, title = "Plot Trend Ranger Slow?", group = 'TrendRanger') 
InputShowTrendFast = input.bool(defval = false, title = "Plot Trend Ranger Fast?", group = 'TrendRanger') 
f_sec(_market, _res, _exp) => request.security(_market, _res, _exp[barstate.isrealtime ? 1 : 0])[barstate.isrealtime ? 0 : 1]

tf = timeframe.in_seconds(Itf) < timeframe.in_seconds(timeframe.period) ? timeframe.period :Itf

trs (tf,TMI,ITP,IRM)=>
    x = (f_sec(syminfo.tickerid,  tf, ta.sma(close,TMI) - ((ta.sma(ta.highest(high,TMI) - ta.lowest(low,TMI) , ITP))*IRM)))
    y = (f_sec(syminfo.tickerid,  tf,ta.sma(close,TMI) + ((ta.sma(ta.highest(high,TMI) - ta.lowest(low,TMI) , ITP))*IRM)))
    x1 = nz(x[1],x)
    y1 = nz(y[1],y)
    x := close[1] >x1?math.max(x,x1):x
    y := close[1] <y1?math.min(y,y1):y
    t = 1
    t :=nz(t[1],t )
    t := t==-1 and close >y1?1:t==1 and close <x1?-1:t
    [t,t==-1?y:x]

[dirfast,fastprice] = trs(tf,ITP,TMI,IRM)
fastup = plot(dirfast==-1?na:InputShowTrendFast?fastprice:na, style=plot.style_linebr, linewidth=2, color=color.lime)
fastdown = plot(dirfast==1?na:InputShowTrendFast?fastprice:na, style=plot.style_linebr, linewidth=2, color=color.purple)

[dirslow,slowprice] = trs(tf,ITP+IBP,TMI,IRM)
slowup = plot(dirslow==-1?na:InputShowTrendSlow?slowprice:na, style=plot.style_linebr, linewidth=2, color=color.lime)
slowdown = plot(dirslow==1?na:InputShowTrendSlow?slowprice:na, style=plot.style_linebr, linewidth=2, color=color.purple)
trendfilldisplay = Input_Trendfill?display.all :display.none
fill(fastup  ,slowup ,display = trendfilldisplay, color = color.new(color.green, 60))
fill(fastdown,slowdown,display = trendfilldisplay,color = color.new(color.red,60))
float ptrl = na
float ptrh = na
trl = low
trh = high
trltime = time
trhtime = time
trltime:=dirfast<0 and low<trl[1]?time:trltime[1]
trhtime:=dirfast>0 and high>trh[1]?time:trhtime[1]
trendfastswithprice = close
trendfastswithprice := dirfast != dirfast[1]?close :trendfastswithprice[1]
trl := dirfast<0 ?math.min(low,trl[1]):dirfast>0?low:trl[1]
trh := dirfast>0 ?math.max(high, trh[1]):dirfast<0?high:trh[1]
ptrh := dirfast!=dirfast[1] and dirfast<0 ?trh[1]:ptrh[1]
ptrl := dirfast!=dirfast[1] and dirfast>0  ?trl[1]:ptrl[1]
TrendLow = plot(ptrl!=ptrl[1]?na: IShowTrendHighLow?ptrl:na, style=plot.style_steplinebr ,color = color.yellow)
TrendHigh = plot(ptrh!=ptrh[1]?na: IShowTrendHighLow?ptrh:na, style=plot.style_steplinebr ,color = color.aqua)
TrendSwitch = plot( trendfastswithprice!= trendfastswithprice[1]?na:IShowTrendHighLow?trendfastswithprice:na, style=plot.style_steplinebr , color =  dirfast < 0 ?color.new(color.red, 90) :color.new(color.green, 90) )
fill( TrendHigh,TrendSwitch, dirfast[1] < 0 ?color.new(color.red, 80):na)
fill(TrendLow,TrendSwitch, dirfast[1] > 0 ?color.new(color.green, 80):na)

if IShowTrendZigZag
    if dirfast != dirfast[1] and dirfast < 0
        line.new( trhtime[0] ,ptrh ,trltime[1], ptrl,xloc.bar_time,style = line.style_dashed, color = color.lime)
    if dirfast != dirfast[1] and dirfast > 0
        line.new(trltime[0] , ptrl ,trhtime[1], ptrh,xloc.bar_time,style = line.style_dashed, color = color.fuchsia)        
if IShowTrendHighLow
    if dirfast != dirfast[1] and dirfast < 0    
        line.new( trhtime[0] ,ptrh ,time, ptrh,xloc.bar_time,style = line.style_dashed, color = color.lime)
    if dirfast != dirfast[1] and dirfast > 0
        line.new( trltime[0] ,ptrl ,time, ptrl,xloc.bar_time,style = line.style_dashed, color = color.fuchsia)
//#################################################################################################################################//
//#################################################################################################################################//
//#################################################################################################################################//
BuySignal = BuyEM  
SellSignal = SellEM 

longCondition = BuySignal // and dirslow > 0
if (longCondition)
    strategy.entry("EMB", strategy.long)

shortCondition = SellSignal    // and dirslow < 0
if (shortCondition)
    strategy.entry("EMS", strategy.short)

//#################################################################################################################################//
//#################################################################################################################################//
formattedTime = str.format_time(time, "yyyy-MM-dd HH:mm", "America/New_York")

BUySellSignal = 0
BUySellSignal := BuySignal?1:SellSignal?-1:BUySellSignal[1]
float BuySellSignalPrice = na

BuySellSignalPrice := BUySellSignal != BUySellSignal[1]?close:BuySellSignalPrice[1]
alertbuy = BUySellSignal==1  and BUySellSignal[1] == -1
alertsell = BUySellSignal==-1  and BUySellSignal[1] == 1

alertcondition(InputAlertBool and alertbuy, title='Buy Signal', message='Buy Signal alertcondition ' )
alertcondition(InputAlertBool and alertsell, title='Sell Signal' , message='Sell Signal alertcondition ' )

EntryMessage=''
if (alertbuy ) 
    alert(formattedTime +" Alert Vix/PM Buy Signal " +EntryMessage, alert.freq_once_per_bar)

if ( alertsell)  
    alert(formattedTime+ " Alert Vix/PM Sell Signal "+EntryMessage, alert.freq_once_per_bar)


//Buy Signal

IndEntryBuy = plot(InputAlertBool and BUySellSignal == 1 ? BuySellSignalPrice : na, title="Position Long mode", style=plot.style_linebr, linewidth=2, color=color.lime)
plotshape(InputShowIndEntrylLable and alertbuy ? BuySellSignalPrice : na, title="Strategy Position *B* ", text="*B*", location=location.absolute, style=shape.labelup, size=size.tiny, color=color.aqua, textcolor=color.white)
if InputShowIndEntrylLable and BUySellSignal[1] == -1 and BUySellSignal == 1 
    label.new(bar_index, BuySellSignalPrice, formattedTime+"  Buy @: " +str.tostring(BuySellSignalPrice), tooltip = formattedTime+" Ind Buy: " +EntryMessage ,color=color.teal, size=size.small, textcolor = color.yellow,yloc= yloc.belowbar)
    line.new(x1=time, y1=low, x2=time, y2=high, xloc=xloc.bar_time, extend=extend.both, color=color.lime, style=line.style_dashed, width=1)//vertical
//Sell Signal

IndEntrySell = plot(InputAlertBool and BUySellSignal == -1 ? BuySellSignalPrice: na, title="Position Short mode", style=plot.style_linebr, linewidth=2, color=color.fuchsia)
plotshape(InputShowIndEntrylLable and alertsell ? BuySellSignalPrice : na, title="Strategy Position *S* ", text="*S*", location=location.absolute, style=shape.labeldown, size=size.tiny, color=color.fuchsia, textcolor=color.white)
if InputShowIndEntrylLable and BUySellSignal[1] == 1 and BUySellSignal == -1 
    label.new(bar_index, BuySellSignalPrice, formattedTime+"  Sell @: " +str.tostring(BuySellSignalPrice), tooltip = formattedTime+" Ind Sell@: " +EntryMessage ,color=color.orange, size=size.small, textcolor = color.navy,yloc= yloc.abovebar)
    line.new(x1=time, y1=low, x2=time, y2=high, xloc=xloc.bar_time, extend=extend.both, color=color.purple, style=line.style_dashed, width=1)//vertical

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

plot(strategy.netprofit, title="PnL", color= strategy.netprofit > 0 ? color.green : color.red, display=display.status_line)

var Profitlabel = label.new(bar_index, close, text="Profit $"+str.tostring(strategy.netprofit), textcolor=color.white )
if InputShowShortStylePnlLable and last_bar_index- bar_index <= 1 
    label.set_text(Profitlabel, "Profit $"+str.tostring(math.round(strategy.netprofit,2)) ) 
    label.set_x(Profitlabel, bar_index)
    label.set_xloc(Profitlabel, time, xloc.bar_time)
    label.set_color(Profitlabel, strategy.netprofit < 0 ? color.red : color.green)
    label.set_yloc(Profitlabel, yloc.abovebar)
    label.set_size(Profitlabel, size.small)
    label.set_tooltip(Profitlabel, "Open Positions: "+str.tostring(math.round(strategy.position_size,2)) +"   "  +"Closed Profit $"+str.tostring(math.round(strategy.openprofit[1],2)) +"   "  +"Net Profit $"+str.tostring(math.round(strategy.netprofit,2)) +"   " +"MaxDrawDn $"+str.tostring(math.round(strategy.max_drawdown,2)))



if InputShowProfitlossLable and (( (strategy.position_size  != strategy.position_size[1] ) and (strategy.position_size == -1 or strategy.position_size == 1  or strategy.opentrades[1] != 0)))
    entryprofit = label.new(bar_index, open, text= " Open Profit $"+str.tostring(math.round(strategy.openprofit[1],2)), textcolor=color.white )
    label.set_text(entryprofit,  "$"+str.tostring(math.round(strategy.openprofit[1],2)) )
    label.set_color(entryprofit, strategy.openprofit[1] < 0 ? color.red : strategy.openprofit[1] > 0 ? color.green : color.rgb(15, 30, 231) )
    label.set_tooltip(entryprofit, "Open Positions: "+str.tostring(math.round(strategy.position_size,2)) +"   "  +"Closed Profit $"+str.tostring(math.round(strategy.openprofit[1],2)) +"   "  +"Net Profit $"+str.tostring(math.round(strategy.netprofit,2)) +"   " +"MaxDrawDn $"+str.tostring(math.round(strategy.max_drawdown,2)))



var labelop = label.new(bar_index, high, text= " Open Profit $"+str.tostring(math.round(strategy.openprofit,2)), textcolor=color.white )
if  InputShowPnlLlable and last_bar_index- bar_index <= 1 
    label.set_text(labelop,  " Open Profit $"+str.tostring(math.round(strategy.openprofit,2)) +" (" + str.tostring(math.round(strategy.position_size,2))+str.tostring(strategy.position_size > 0 ?" Long":strategy.position_size < 0 ?" Short":"None")  +")"  )
    label.set_x(labelop, bar_index)
    label.set_xloc(labelop, time, xloc.bar_time)
    label.set_color(labelop, strategy.openprofit < 0 ? color.red : color.green)
    label.set_yloc(labelop, yloc.abovebar)
    label.set_size(labelop, size.small)
    label.set_tooltip(labelop, "Open Positions: "+str.tostring(math.round(strategy.position_size,2)) +"   "  +"Open Profit $"+str.tostring(math.round(strategy.openprofit,2)) +"   "  +"Net Profit $"+str.tostring(math.round(strategy.netprofit,2)) +"   " +"MaxDrawDn $"+str.tostring(math.round(strategy.max_drawdown,2)))

var labelnp = label.new(bar_index, high, text="Profit $"+str.tostring(math.round(strategy.netprofit,2)) +"                                              .", textcolor=color.white )
if InputShowPnlLlable and last_bar_index- bar_index <= 1
    label.set_text(labelnp, "Profit Factor: "+str.tostring(math.round(strategy.grossprofit/strategy.grossloss,2)) +"                                                " +"Profit $"+str.tostring(math.round(strategy.netprofit,2)) )
    label.set_x(labelnp, bar_index)
    label.set_xloc(labelnp, time, xloc.bar_time)
    label.set_color(labelnp, strategy.netprofit < 0 ? color.red : color.green)
    label.set_yloc(labelnp, yloc.belowbar)
    label.set_size(labelnp, size.small)

var labelmaxdd = label.new(bar_index, low, text="MaxDrawDn $"+str.tostring(math.round(strategy.max_drawdown,2)), textcolor=color.white )
if InputShowPnlLlable and last_bar_index- bar_index <= 1
    label.set_text(labelmaxdd, "MaxDrawDn $"+str.tostring(math.round(strategy.max_drawdown,2)) ) 
    label.set_x(labelmaxdd, bar_index)
    label.set_xloc(labelmaxdd, time, xloc.bar_time)
    label.set_color(labelmaxdd, strategy.max_drawdown > 0 ? color.red : color.green)
    label.set_yloc(labelmaxdd, yloc.belowbar)
    label.set_size(labelmaxdd, size.small)




